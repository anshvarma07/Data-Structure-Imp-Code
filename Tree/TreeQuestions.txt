Height of Binary Tree

class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        int left=maxDepth(root->left);
        int right=maxDepth(root->right);
        int ans=max(left,right)+1;
        return ans;
    }
};


Diameter of Binary Tree

class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(!root) return 0;

        int op1=diameterOfBinaryTree(root->left);
        int op2=diameterOfBinaryTree(root->right);
        int op3=height(root->left)+height(root->right);
        int ans=max(op1,max(op2,op3));
        return ans;
    }

    int height(TreeNode* root){
        if(!root) return 0;
        
        int left=height(root->left);
        int right=height(root->right);
        int ans=max(left,right)+1;
        return ans;
    }
};

Optimised Approach for Diameter of Binary Tree.(Using the concept of Pair<int,int>)
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        return diameterFast(root).first;
    };
    pair<int,int> diameterFast(TreeNode* root){
        pair<int,int> p=make_pair(0,0);
        if(!root) return p;

        pair<int,int> left=diameterFast(root->left);
        pair<int,int> right=diameterFast(root->right);

        int op1=left.first;
        int op2=right.first;
        int op3=left.second+right.second;

        pair<int,int> ans;
        ans.first=max(op1,max(op2,op3));
        ans.second=max(left.second,right.second)+1;
        return ans;
    }     
};